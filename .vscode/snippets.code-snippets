{
    // Factory
    "Create Factory": {
        "scope": "csharp",
        "prefix": "sm-factory",
        "body": [
            "using System.Collections;",
            "using System.Collections.Generic;",
            "using UnityEngine;",
            "",
            "public enum ${1:ScriptName}States",
            "{",
            "\tBasic,",
            "}",
            "public class ${1:ScriptName}Factory : Factory<${1:ScriptName}States, ${1:ScriptName}State, ${1:ScriptName}SM>",
            "{",
            "\tDictionary<${1:ScriptName}States, ${1:ScriptName}State> _States = new();",
            "\tpublic override Dictionary<${1:ScriptName}States, ${1:ScriptName}State> States => _States;",
            "",
            "\tpublic ${1:ScriptName}Factory(${1:ScriptName}SM sm) : base(sm)",
            "\t{",
            "\t\tStates.Add(${1:ScriptName}States.Basic, new ${2:State}(sm, this));",
            "\t}",
            "}"
        ],
        "description": "Add State Machine Factory"
    },
    // State Machine
    "Create State Machine": {
        "scope": "csharp",
        "prefix": "sm-state-machine",
        "body": [
            "using System.Collections;",
            "using System.Collections.Generic;",
            "using UnityEngine;",
            "",
            "public class ${1:ScriptName}SM : MonoBehaviour",
            "{",
            "\t${1:ScriptName}State currentState;",
            "\t${1:ScriptName}Factory factory;",
            "",
            "\t#region GETTERS / SETTERS",
            "\tpublic ${1:ScriptName}State CurrentState { get => currentState; set => currentState = value; }",
            "\tpublic ${1:ScriptName}Factory Factory { get => factory; set => factory = value; }",
            "\t#endregion",
            "",
            "\tvoid Awake()",
            "\t{",
            "\t\tFactory = new ${1:ScriptName}Factory(this);",
            "\t\tCurrentState = factory.States[${1:ScriptName}States.Basic];",
            "\t}",
            "",
            "\tvoid Start()",
            "\t{",
            "\t\tCurrentState.EnterStates();",
            "\t}",
            "",
            "\tvoid Update()",
            "\t{",
            "\t\tCurrentState.UpdateStates();",
            "\t}",
            "}"
        ],
        "description": "Add State Machine"
    },
    // State Machine
    "Create State": {
        "scope": "csharp",
        "prefix": "sm-state",
        "body": [
            "using System.Collections;",
            "using System.Collections.Generic;",
            "using UnityEngine;",
            "",
            "public abstract class ${1:ScriptName}State : State<${1:ScriptName}SM, ${1:ScriptName}Factory>",
            "{",
            "\tpublic ${1:ScriptName}State(${1:ScriptName}SM stateMachine, ${1:ScriptName}Factory factory) : base(stateMachine, factory)",
            "\t{",
            "\t\tCtx = stateMachine;",
            "\t\tFactory = factory;",
            "\t}",
            "",
            "\tprotected override void SwitchState(State<${1:ScriptName}SM, ${1:ScriptName}Factory> newState)",
            "\t{",
            "\t\tbase.SwitchState(newState);",
            "\t\tif (IsRoot)",
            "\t\t{",
            "\t\t\tCtx.CurrentState = (${1:ScriptName}State)newState;",
            "\t\t}",
            "\t\telse",
            "\t\t{",
            "\t\t\tCurrentSuperState.SetSubState(newState);",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Add State"
    },
    // State Machine State
    "Create State Machine state": {
        "scope": "csharp",
        "prefix": "sm-state-machine-state",
        "body": [
            "using System.Collections;",
            "using System.Collections.Generic;",
            "using UnityEngine;",
            "",
            "public class ${1:ScriptName} : ${1:ScriptName}State",
            "{",
            "\tpublic ${1:ScriptName}(${1:ScriptName}SM stateMachine, ${1:ScriptName}Factory factory) : base(stateMachine, factory)",
            "\t{",
            "\t\tIsRoot = true;",
            "\t}",
            "",
            "\tpublic override void Enter()",
            "\t{",
            "\t\tbase.Enter();",
            "\t}",
            "",
            "\tpublic override void Update()",
            "\t{",
            "\t\tbase.Update();",
            "\t\tCheckSwitchState();",
            "\t}",
            "",
            "\tpublic override void FixedUpdate()",
            "\t{",
            "\t\tbase.FixedUpdate();",
            "\t}",
            "",
            "\tpublic override void Exit()",
            "\t{",
            "\t\tbase.Exit();",
            "\t}",
            "",
            "\tpublic override void CheckSwitchState()",
            "\t{",
            "\t\tbase.CheckSwitchState();",
            "\t}",
            "}"
        ],
        "description": "Add State"
    },
}
